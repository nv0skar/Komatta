// Komatta
// Copyright (C) 2022 Oscar
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

#![allow(non_snake_case)]

use Komatta::{actions::Action, Cypher, BLOCK_SIZE};

use clap::{Arg, Command};
use colored::*;
use hex;
use rand::{thread_rng, Rng};
use std::{
    ffi::OsString,
    fs::File,
    io::{BufWriter, Write},
    os::unix::prelude::OsStrExt,
    str::FromStr,
};

pub const OUT_FILE: &'static str = "output.txt";

fn main() {
    let parsed = Command::new(env!("CARGO_PKG_NAME"))
        .version(env!("CARGO_PKG_VERSION"))
        .subcommand_required(true)
        .arg(
            Arg::new("input").help("the string to process")
                .takes_value(true)
                .required(true)
                .allow_invalid_utf8(true)
                .value_parser(clap::value_parser!(OsString)),
        )
        .subcommands([
            Command::new("encrypt").args([
                Arg::new("key").help("the hex value used to encrypt the input")
                    .takes_value(true)
                    .required(false)
                    .conflicts_with("keySize")
                    .value_parser(clap::value_parser!(String)),
                Arg::new("keySize").help("if the key is not present, a randomly generated byte stream with the specified size will be used as the key (the minimum size is 4)")
                    .long("keySize")
                    .takes_value(true)
                    .required(false)
                    .default_value(BLOCK_SIZE.to_string().as_str())
                    .conflicts_with("key")
                    .value_parser(clap::value_parser!(usize)),
            ]),
            Command::new("decrypt").arg(
                Arg::new("key").help("the hex value used to decrypt the input")
                    .takes_value(true)
                    .required(true)
                    .value_parser(clap::value_parser!(String)),
            ),
        ]).get_matches();

    let crypto = Cypher {
        action: Action::from_str(parsed.subcommand().unwrap().0).unwrap(),
        key: {
            if let Some(key) = parsed.subcommand().unwrap().1.get_one::<String>("key") {
                hex::decode(key).unwrap()
            } else if Action::from_str(parsed.subcommand().unwrap().0).unwrap() == Action::Encrypt {
                let mut rng = thread_rng();
                (0..{
                    if let Some(keySize) =
                        parsed.subcommand().unwrap().1.get_one::<usize>("keySize")
                    {
                        if *keySize < 4 {
                            4
                        } else {
                            *keySize
                        }
                    } else {
                        4
                    }
                })
                    .map(|_| rng.gen_range(0..u8::MAX))
                    .collect()
            } else {
                panic!("Tried to decrypt without suplying a key!")
            }
        },
        input: {
            match Action::from_str(parsed.subcommand().unwrap().0).unwrap() {
                Action::Encrypt => parsed
                    .get_raw("input")
                    .unwrap()
                    .next()
                    .unwrap()
                    .as_bytes()
                    .to_vec(),
                Action::Decrypt => hex::decode(
                    parsed
                        .get_raw("input")
                        .unwrap()
                        .next()
                        .unwrap()
                        .as_bytes()
                        .to_vec(),
                )
                .unwrap(),
            }
        },
    };

    println!(
        "{} Input: {}, Key: {} -> {}",
        match crypto.action {
            Action::Encrypt => "Encrypted",
            Action::Decrypt => "Decrypted",
        }
        .red()
        .bold()
        .underline(),
        match crypto.action {
            Action::Encrypt => {
                if let Ok(decoded) = String::from_utf8(crypto.input.clone()) {
                    decoded
                } else {
                    format!("{}", "The input couldn't be UTF-8 encoded!".bright_red().bold())
                }
            },
            Action::Decrypt => hex::encode(&crypto.input),
        }
        .bright_white(),
        hex::encode(&crypto.key).bright_white(),
        match crypto.action {
            Action::Encrypt => hex::encode(crypto.process().unwrap()),
            Action::Decrypt => {
                match crypto.process() {
                    Ok(decrypted) => {
                        if let Ok(decoded) = String::from_utf8(decrypted.clone()) {
                            decoded
                        } else {
                            let mut writeBuffer = BufWriter::new(File::create(OUT_FILE).unwrap());
                            writeBuffer.write_all(decrypted.as_slice()).unwrap();
                            writeBuffer.flush().unwrap();
                            format!("{}", format!("The output couldn't be UTF-8 encoded, so the output was written as raw bytes in the {} file!", OUT_FILE.bright_white()).bright_red())
                        }
                    }
                    Err(error) => format!("{}", error.bright_red())
                }
            }
        }
        .bright_blue()
        .bold()
        .underline()
    )
}
